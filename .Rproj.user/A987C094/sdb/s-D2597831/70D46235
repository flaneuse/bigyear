{
    "collab_server" : "",
    "contents" : "# load libraries ----------------------------------------------------------\n\n# Fitting libraries\nlibrary(MASS)\nlibrary(sandwich)\nlibrary(lmtest)\nlibrary(plm)\nlibrary(animation)\nlibrary(gridExtra)\nlibrary(grid)\n\nlibrary(ggalt)\nlibrary(coefplot)\n\n# Developer libraries\nlibrary(roxygen2)\nlibrary(testthat)\n\n# Data manipulation\nlibrary(dplyr) # Filter, create new variables, summarise, ... Basically, anything you can think to do to a dataset\nlibrary(tidyr) # Reshape and merge datasets\nlibrary(data.table)\nlibrary(stringr) # String manipulation\nlibrary(lubridate)\n\n# Plotting / viz functions\nlibrary(ggplot2) # Incredibly powerful plotting library built off of the \"Grammer of Graphics\"\nlibrary(ggvis)\nlibrary(htmltools)\nlibrary(htmlwidgets)\nlibrary(metricsgraphics)\nlibrary(rCharts)\nlibrary(plotly)\n\nlibrary(ggmap) # geocoding and geospatial library\n\n# Libraries to help import files\nlibrary(haven) # Imports in files from Stata, SAS, and SPSS\nlibrary(readr) # An advanced form of the base 'read.csv' file with some added functionality.\nlibrary(readxl) # Functions to import in multiple sheets from Excel\nlibrary(googlesheets) # Functions to connect to Google Drive spreadsheets.\nlibrary(rvest) # Scrapes websites\n\n\n\n\nlibrary(knitr) # Helper function to produce this RMarkdown document.\n\n# Colors and fonts\nlibrary(RColorBrewer)\nlibrary(extrafont)\nloadfonts()\n\n# library(choroplethrAdmin1)\n# library(choroplethr)\n\n\n# colors ------------------------------------------------------------------\n# Custom color libraries\nsource(\"~/GitHub/Ethiopia/R/colorPalettes.R\")\n\n\n\n# recode variables --------------------------------------------------------\n# mutate with if/else dictionary function\nsource(\"~/GitHub/Ethiopia/R/code2Cat.r\")\n\nconvert01 = function(varName) {\n  paste0('ifelse(', varName, ' == 2, 0, \n                  ifelse(', varName, '== 1, 1, NA))')\n  \n  # mutate_(.dots= setNames(list(convert01('w4_04')), ''))\n}\n\n\n\n# clustering function, from dr. essam -------------------------------------\ncl   <- function(dat,fm, cluster){\n  M <- length(unique(cluster))\n  N <- length(cluster)\n  K <- fm$rank\n  dfc <- (M/(M-1))*((N-1)/(N-K))\n  uj  <- apply(estfun(fm),2, function(x) tapply(x, cluster, sum));\n  vcovCL <- dfc*sandwich(fm, meat=crossprod(uj)/N)\n  coeftest(fm, vcovCL) \n}\n\n\n# Multiple plot function --------------------------------------------------\n# ggplot objects can be passed in ..., or to plotlist (as a list of ggplot objects)\n# - cols:   Number of columns in layout\n# - layout: A matrix specifying the layout. If present, 'cols' is ignored.\n#\n# If the layout is something like matrix(c(1,2,3,3), nrow=2, byrow=TRUE),\n# then plot 1 will go in the upper left, 2 will go in the upper right, and\n# 3 will go all the way across the bottom.\n#\nmultiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {\n  library(grid)\n  \n  # Make a list from the ... arguments and plotlist\n  plots <- c(list(...), plotlist)\n  \n  numPlots = length(plots)\n  \n  # If layout is NULL, then use 'cols' to determine layout\n  if (is.null(layout)) {\n    # Make the panel\n    # ncol: Number of columns of plots\n    # nrow: Number of rows needed, calculated from # of cols\n    layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),\n                     ncol = cols, nrow = ceiling(numPlots/cols))\n  }\n  \n  if (numPlots==1) {\n    print(plots[[1]])\n    \n  } else {\n    # Set up the page\n    grid.newpage()\n    pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))\n    \n    # Make each plot, in the correct location\n    for (i in 1:numPlots) {\n      # Get the i,j matrix positions of the regions that contain this subplot\n      matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))\n      \n      print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,\n                                      layout.pos.col = matchidx$col))\n    }\n  }\n}\n\n\n# formatting numbers ------------------------------------------------------\nroundMean = function(x) {\n  round(mean(x, na.rm = TRUE), 2)\n}\n\nroundStd = function(x) {\n  round(sd(x, na.rm = TRUE), 2)\n}\n\npercent = function(x, ndigits = 1) {\n  paste0(sprintf(\"%.f\", round(x*100, ndigits)), \"%\")\n}\n\n\n\n# clean up environment ----------------------------------------------------\nrmExcept = function(x) {\n  # x must be a string or a list of strings which encode the var names.\n  rm(list=setdiff(ls(), x))\n}\n\n\n\n# remove attributes from dta import ---------------------------------------\n\nremoveAttributes <- function (data) {\n  data <- lapply(data, function(x) {attr(x, 'labels') <- NULL; x})\n  data <- lapply(data, function(x) {attr(x, 'label') <- NULL; x})\n  data <- lapply(data, function(x) {attr(x, 'class') <- NULL; x})\n  data <- lapply(data, function(x) {attr(x, 'levels') <- NULL; x})\n  data = data.frame(data)\n}\n\npullAttributes <- function (data) {\n  label = lapply(data, function(x) attr(x, 'label'))\n  \n  label = data.frame(label)\n  # labels = lapply(data, function(x) attr(x, 'labels'))\n  \n  # attrs = data.frame(label = label, labels = labels)\n}\n\n\n\n\n# themes ------------------------------------------------------------------\n\n\n\ntheme_jointplot <- function() {\n  theme_bw() +\n    theme(\n      text = element_text(family = 'Segoe UI Light'),\n      axis.text = element_text(size = 16, color = grey50K, family = 'Segoe UI Light'),\n      title =  element_text(size = 18, family = 'Segoe UI', hjust = 0, color = grey60K),\n      axis.title.y =  element_text(size = 20, color = grey50K, family = 'Segoe UI Semilight', hjust = 0.5, vjust = 1),\n      axis.title.x =  element_text(size = 20, color = grey50K, family = 'Segoe UI Semilight', hjust = 0.5, vjust = -0.25),\n      # axis.title.y = element_blank(), \n      # axis.line = element_blank(),\n      # axis.ticks = element_blank()\n      strip.text = element_text(size=13, color = grey50K, family = 'Segoe UI Semilight'),\n      legend.position = c(0.85, 0.85),\n      legend.text = element_text(size = 13),\n      strip.background = element_blank()\n      #           panel.grid.minor.y = element_blank(),\n      #           panel.grid.major.y = element_blank())\n    )\n}\n\ntheme_box_ygrid<- function() {\n  theme_bw() +\n    theme(\n      rect = element_blank(),\n      plot.background = element_blank(),\n      # panel.background = element_rect(fill = 'white'),\n      axis.text = element_text(size = 10, color = '#4D525A'),\n      title =  element_text(size = 14, face = \"bold\", hjust = 0, color = '#4D525A'),\n      axis.title.x =  element_text(size = 12, face = \"bold\", color = '#4D525A', hjust = 0.5, vjust = -0.25),\n      axis.title.y = element_blank(), \n      # axis.line = element_blank(),\n      # axis.ticks = element_blank()\n      strip.text = element_text(size=14, face = 'bold', hjust = 0.05, vjust = -2.5, color = '#4D525A'),\n      legend.position = 'none',\n      strip.background = element_blank(),\n      axis.ticks.y = element_blank(),\n      panel.margin = unit(3, 'lines'),\n      panel.grid.major.y = element_line(size = 0.2, color = '#bababa'),\n      panel.grid.minor.y = element_blank(),\n      panel.grid.minor.x = element_blank(),\n      panel.grid.major.x = element_blank())\n}\n\ntheme_xylab<- function() {\n  theme_bw() +\n    theme(\n      text = element_text(family = 'Segoe UI Light', colour = grey60K),\n      rect = element_blank(),\n      plot.background = element_blank(),\n      axis.text = element_text(size = 12,  color = grey60K),\n      title =  element_text(size = 15, family = \"Segoe UI\", hjust = 0, color = grey90K),\n      axis.title =  element_text(size = 14, family = \"Segoe UI Semilight\", color = grey60K, hjust = 0.5, vjust = -0.25),\n      strip.text = element_text(size=14, family = \"Segoe UI Semilight\", hjust = 0.05, vjust = -2.5, color = grey90K),\n      legend.position = 'none',\n      strip.background = element_blank(),\n      axis.ticks = element_blank(),\n      panel.margin = unit(1, 'lines'),\n      panel.grid.major.y = element_blank(),\n      panel.grid.minor.y = element_blank(),\n      panel.grid.minor.x = element_blank(),\n      panel.grid.major.x = element_blank())\n}\n\ntheme_xygrid<- function() {\n  theme_bw() +\n    theme(\n      text = element_text(family = 'Segoe UI Light', colour = grey60K),\n      rect = element_blank(),\n      plot.background = element_blank(),\n      # panel.background = element_rect(fill = 'white'),\n      axis.text = element_text(size = 12,  color = grey60K),\n      title =  element_text(size = 15, family = \"Segoe UI\", hjust = 0, color = grey90K),\n      axis.title.x =  element_text(size = 14, family = \"Segoe UI Semilight\", color = grey60K, hjust = 0.5, vjust = -0.25),\n      axis.title.y = element_blank(), \n      # axis.line = element_blank(),\n      # axis.ticks = element_blank()\n      strip.text = element_text(size=14, face = 'bold', hjust = 0.05, vjust = -2.5, color = '#4D525A'),\n      legend.position = 'none',\n      strip.background = element_blank(),\n      axis.ticks = element_blank(),\n      panel.margin = unit(3, 'lines'),\n      panel.grid.major.y = element_line(size = 0.2, color = '#bababa'),\n      panel.grid.minor.y = element_blank(),\n      panel.grid.minor.x = element_blank(),\n      panel.grid.major.x = element_line(size = 0.1, color = '#bababa'))\n}\n\ntheme_blankbox <- function() {\n  theme_bw() +\n    theme(\n      axis.text = element_text(size = 16, color = 'white'),\n      title =  element_text(size = 18, face = \"bold\", hjust = 0, color = 'white'),\n      axis.title =  element_text(size = 20, face = \"bold\", color = 'white', hjust = 0.5, vjust = -0.25),\n      # axis.title.y = element_blank(), \n      # axis.line = element_blank(),\n      axis.ticks = element_blank(),\n      strip.text = element_text(size=11),\n      strip.background = element_blank(),\n      legend.position=\"none\",\n      panel.grid.minor.x = element_blank(),\n      panel.grid.major.x = element_blank(),\n      panel.grid.minor.y = element_blank(),\n      panel.grid.major.y = element_blank(),\n      panel.border = element_blank()\n    )\n}\n\n\ntheme_blankLH <- function() {\n  theme(\n    title = element_blank(),\n  axis.title = element_blank(),\n  axis.text = element_blank(),\n  axis.ticks = element_blank(),\n  axis.ticks.length = unit(0, units = 'points'),\n  axis.ticks.margin = unit(0, units =  'points'),\n  panel.border = element_blank(),\n  plot.margin = rep(unit(0, units = 'points'),4),\n  panel.grid = element_blank(),\n  panel.background = element_blank(), \n  plot.background = element_blank(), \n  legend.position=\"none\"\n  )\n}\n\n\ntheme_heatmap <- function() {\n  theme(\n    title =  element_text(size = 16, hjust = 0, color = grey90K,\n                          family = 'Segoe UI'),\n    axis.title = element_blank(),\n    axis.text = element_text(size = 12, hjust = 0.5, \n                             color = grey60K, family = 'Segoe UI Light'),\n    axis.ticks = element_blank(),\n    # axis.text.margin = unit(0, units =  'points'),\n    panel.border = element_blank(),\n    plot.margin = rep(unit(0, units = 'points'),4),\n    panel.grid = element_blank(),\n    panel.background = element_blank(), \n    plot.background = element_blank(), \n    legend.position=\"none\"\n  )\n}\n\n\ntheme_xOnly<- function() {\n  theme(title = element_text(size = 32, color = grey90K),\n        axis.line = element_line(color = grey60K, size = 1),\n        axis.ticks.x = element_line(color = grey60K, size = 0.5),\n        axis.text.x = element_text(size = 16, color = grey60K, family = 'Segoe UI Light'),\n        axis.title.x = element_text(size = 22, color = grey60K, family = 'Segoe UI Semilight'),\n        axis.text.y = element_blank(),\n        axis.title.y = element_blank(), \n        axis.line.y = element_blank(),\n        axis.ticks.y = element_blank(),\n        legend.position=\"none\",\n        panel.background = element_blank(),\n        panel.grid.minor.x = element_blank(),\n        panel.grid.major.x = element_blank(),\n        panel.grid.minor.y = element_blank(),\n        panel.grid.major.y = element_blank(),\n        panel.border = element_blank(),\n        plot.margin = rep(unit(0, units = 'points'),4),\n        panel.grid = element_blank(),\n        panel.background = element_blank(), \n        strip.text = element_text(size=13, face = 'bold'),\n        strip.background = element_blank()\n  )\n}\n\n\ntheme_xAxis_yText<- function() {\n  theme(title = element_text(size = 32, color = grey90K),\n        axis.line = element_line(color = grey60K, size = 1),\n        axis.ticks.x = element_line(color = grey60K, size = 0.5),\n        axis.text.x = element_text(size = 16, color = grey60K, family = 'Segoe UI Light'),\n        axis.title.x = element_text(size = 22, color = grey60K, family = 'Segoe UI Semilight'),\n        axis.text.y = element_text(size = 16, color = grey60K, family = 'Segoe UI Light'),\n        axis.title.y = element_blank(), \n        axis.line.y = element_blank(),\n        axis.ticks.y = element_blank(),\n        legend.position=\"none\",\n        panel.background = element_blank(),\n        panel.grid.minor.x = element_blank(),\n        panel.grid.major.x = element_blank(),\n        panel.grid.minor.y = element_blank(),\n        panel.grid.major.y = element_blank(),\n        panel.border = element_blank(),\n        plot.margin = rep(unit(0, units = 'points'),4),\n        panel.grid = element_blank(),\n        panel.background = element_blank(), \n        strip.text = element_text(size=13, face = 'bold'),\n        strip.background = element_blank()\n  )\n}\n\n\ntheme_xGrid<- function() {\n  theme(title = element_text(size = 16, color = grey90K, \n                             family = 'Segoe UI'),\n        axis.line = element_blank(),\n        axis.ticks.x = element_blank(),\n        axis.text.x = element_text(size = 16, color = grey60K, family = 'Segoe UI Light'),\n        axis.title.x = element_text(size = 18, color = grey60K, family = 'Segoe UI Semilight'),\n        axis.text.y = element_text(size = 16, color = grey60K, family = 'Segoe UI Light'),\n        axis.title.y = element_blank(), \n        axis.line.y = element_blank(),\n        axis.ticks.y = element_blank(),\n        legend.position=\"none\",\n        panel.background = element_blank(),\n        panel.grid.minor.x = element_blank(),\n        panel.grid.major.x = element_line(size = 0.1, colour = grey60K),\n        panel.grid.minor.y = element_blank(),\n        panel.grid.major.y = element_blank(),\n        panel.border = element_blank(),\n        plot.margin = rep(unit(0, units = 'points'),4),\n        panel.background = element_blank(), \n        strip.text = element_text(size=13, face = 'bold'),\n        strip.background = element_blank()\n  )\n}\n\n\n\ntheme_yGrid<- function() {\n  theme(title = element_text(size = 16, color = grey90K, \n                             family = 'Segoe UI'),\n        axis.line = element_blank(),\n        axis.ticks.x = element_blank(),\n        axis.text.x = element_text(size = 16, color = grey60K, family = 'Segoe UI Light'),\n        axis.title.y = element_text(size = 18, color = grey60K, family = 'Segoe UI Semilight'),\n        axis.text.y = element_text(size = 16, color = grey60K, family = 'Segoe UI Light'),\n        axis.title.x = element_blank(), \n        axis.line.y = element_blank(),\n        axis.ticks.y = element_blank(),\n        legend.position=\"none\",\n        panel.background = element_blank(),\n        panel.grid.minor.y = element_blank(),\n        panel.grid.major.y = element_line(size = 0.1, colour = grey60K),\n        panel.grid.minor.x = element_blank(),\n        panel.grid.major.x = element_blank(),\n        panel.border = element_blank(),\n        plot.margin = rep(unit(0, units = 'points'),4),\n        panel.background = element_blank(), \n        strip.text = element_text(size=13, face = 'bold'),\n        strip.background = element_blank()\n  )\n}\n\n\ntheme_bump<- function() {\n  theme(title = element_text(size = 32, color = '#4D525A'),\n        axis.line = element_blank(),\n        axis.ticks.length = unit(7, 'points'),\n        axis.ticks.y = element_line(color = '#4D525A', size = 0.5),\n        axis.text.y = element_text(size = 16, color = '#4D525A'),\n        axis.title.y = element_text(size = 22, color = '#4D525A'),\n        axis.text.x = element_text(size = 16, color = '#4D525A'),\n        axis.title.x = element_blank(), \n        axis.line.x = element_blank(),\n        axis.ticks.x = element_blank(),\n        legend.position=\"none\",\n        panel.background = element_blank(),\n        panel.grid.minor.x = element_blank(),\n        panel.grid.major.x = element_blank(),\n        panel.grid.minor.y = element_blank(),\n        panel.grid.major.y = element_blank(),\n        strip.text = element_text(size=13, face = 'bold'),\n        strip.background = element_blank()\n  )\n}\n\n\ntheme_classicLH<- function() {\n  theme(title = element_text(size = 32, color = '#4D525A'),\n        axis.line = element_blank(),\n        axis.ticks.x = element_line(color = '#4D525A', size = 1),\n        axis.text.x = element_text(size = 16, color = '#4D525A'),\n        axis.title.x = element_text(size = 22, color = '#4D525A'),\n        axis.ticks.y = element_line(color = '#4D525A', size = 1),\n        axis.text.y = element_text(size = 16, color = '#4D525A'),\n        axis.title.y = element_text(size = 22, color = '#4D525A'),\n        legend.position=\"none\",\n        panel.background = element_blank(),\n        panel.grid.minor.x = element_blank(),\n        panel.grid.major.x = element_blank(),\n        panel.grid.minor.y = element_blank(),\n        panel.grid.major.y = element_blank())\n}\n\ntheme_pairGrid = function() {\n  theme(legend.position=\"none\",\n        plot.background = element_blank(),\n        panel.background = element_blank(),\n        axis.text = element_text(size = 16, color = grey60K, family = 'Segoe UI Light'),\n        title =  element_text(size = 18, face = \"bold\", hjust = 0, color = grey90K, family = 'Segoe UI'),\n        axis.title =  element_blank(),\n        panel.grid.major.x = element_blank(),\n        panel.grid.major.y= element_blank(),\n        panel.grid.minor.x = element_blank(),\n        panel.grid.minor.y= element_blank(),\n        panel.background = element_blank(),\n        axis.line = element_line(size = 0.2, colour = grey60K),\n        axis.ticks.x = element_blank(),\n        plot.margin = rep(unit(0, units = 'points'),4),\n        panel.margin = rep(unit(0, units = 'points'),4),\n        panel.border = element_blank(),\n        # axis.text.x  = element_blank(), axis.title.x  = element_blank(),\n        # axis.ticks = element_blank(), axis.line = element_blank(),\n        axis.ticks.y = element_blank(), axis.line.y = element_blank(),\n        axis.text.y = element_blank(), axis.title.y = element_blank())\n}\n\n",
    "created" : 1451337555446.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1700435135",
    "id" : "70D46235",
    "lastKnownWriteTime" : 1451337586,
    "last_content_update" : 1451337586058,
    "path" : "~/GitHub/llamar/themes_ldh.r",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}